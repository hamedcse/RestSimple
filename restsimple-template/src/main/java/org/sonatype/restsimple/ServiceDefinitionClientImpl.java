/*
 * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.
 * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Apache License Version 2.0 is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
package org.sonatype.restsimple;

import com.ning.http.client.BodyGenerator;
import com.ning.http.client.FluentStringsMap;
import com.ning.http.client.Response;
import com.ning.http.client.SimpleAsyncHttpClient;
import org.sonatype.restsimple.client.ServiceDefinitionClient;

import java.util.Arrays;
import java.util.List;
import java.util.Map;


/**
 * This template is generated by ASM, The file is commited here for debugging purpose.
 */
public class ServiceDefinitionClientImpl extends ServiceDefinitionClient{

    private final SimpleAsyncHttpClient sahc;

    private final String remoteServerUri;

    public ServiceDefinitionClientImpl(SimpleAsyncHttpClient sahc, String remoteServerUri) {
        this.sahc = sahc;
        this.remoteServerUri = remoteServerUri;
    }

    public Response doGet(String... paths) {

        List<String> uriPaths = Arrays.asList(paths);
        String path = createUri("getAddressBook", uriPaths);

        try {
            return sahc.derive().setUrl(remoteServerUri + path).build().get().get();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public Response doHead(String... paths) {

        List<String> uriPaths = Arrays.asList(paths);
        String path = createUri("getAddressBook", uriPaths);

        try {
            return sahc.derive().setUrl(remoteServerUri + path).build().head().get();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public Response doPut(String... paths) {

        List<String> uriPaths = Arrays.asList(paths);
        String path = createUri("createAddressBook", uriPaths);

        try {
            return sahc.derive().setUrl(remoteServerUri + path).build().put((BodyGenerator) null).get();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public Response doPost(Map<String,String> maps, String... paths) {

        FluentStringsMap ahcMap = new FluentStringsMap();
        for (Map.Entry<String,String> e : maps.entrySet() ) {
            ahcMap.add(e.getKey(), e.getValue());
        }

        List<String> uriPaths = Arrays.asList(paths);
        String path = createUri("updateAddressBook", uriPaths);

        try {
            return sahc.derive().setParameters(ahcMap).setUrl(remoteServerUri + path).build().post((BodyGenerator) null).get();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public Response doDelete(String... paths) {

        List<String> uriPaths = Arrays.asList(paths);
        String path = createUri("createAddressBook", uriPaths);

        try {
            return sahc.derive().setUrl(remoteServerUri + path).build().delete().get();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    private String createUri(String remoteMethod, List<String> uriPaths) {
        StringBuilder b = new StringBuilder("/");
        b.append(remoteMethod).append("/");
        for (String s: uriPaths) {
            b.append(s).append("/");
        }

        String path = b.toString();
        return path.substring(0, path.length() -1);
    }

}
